{"version":3,"sources":["GridCell.js","game/Direction.js","game/Board.js","game/Game2048.js","App.js","index.js"],"names":["GridCell","props","className","style","background","fontSize","color","foreground","value","Direction","UP","DOWN","LEFT","RIGHT","Cell","i","j","this","SquareBoard","width","cells","data","Map","_rows","cell","set","JSON","stringify","push","get","direction","row","reverse","col","map","e","allCells","concat","every","a","length","Math","floor","random","shuffle","max","find","test","values","some","list","filter","reduce","v","Game2048","key","pow","colors","startBoard","colorToHex","getCellValue","addNewValue","score","moved","getColumn","moveValuesInRowOrColumn","getRow","rowOrColumn","movedList","ary","add","nonZeroList","len","current","mergeEqualOnArray","getValue","total","movedLen","setValue","hasEmptyCells","toString","require","default","App","useState","game","setGame","handleArrowKey","useCallback","event","keyCode","move","useEffect","window","addEventListener","handlers","useSwipeable","onSwipedUp","_","onSwipedDown","onSwipedLeft","onSwipedRight","delta","preventDefaultTouchmoveEvent","trackTouch","trackMouse","rotationAngle","processMove","rows","cols","getBackgroundColor","getForegroundColor","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19fd67b0.chunk.js","sourcesContent":["function GridCell(props) {\n  return (\n    <div\n      className=\"rounded h-100 d-flex align-items-center\"\n      style={{\n        background: props.background,\n      }}\n    >\n      <div\n        className=\"w-100 text-center font-weight-bold user-select-none\"\n        style={{\n          fontSize: \"1.5em\",\n          color: props.foreground,\n        }}\n      >\n        {props.value}\n      </div>\n    </div>\n  );\n}\n\nexport default GridCell;\n","const Direction = {\n  UP: \"UP\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n  RIGHT: \"RIGHT\",\n};\n\nexport default Direction;\n","import Direction from \"./Direction\";\n\nexport class Cell {\n  constructor(i, j) {\n    this.i = i;\n    this.j = j;\n  }\n}\n\nexport class SquareBoard {\n  constructor(width) {\n    this.cells = [];\n    this.data = new Map();\n    for (var i = 0; i < width; i++) {\n      let _rows = [];\n      for (var j = 0; j < width; j++) {\n        let cell = new Cell(i, j);\n        this.data.set(JSON.stringify(cell), 0);\n        _rows.push(cell);\n      }\n      this.cells.push(_rows);\n    }\n  }\n\n  get score() {\n    var list = [...this.data.values].filter((e) => e > 2);\n\n    return list.length > 0 ? list.reduce((v, e) => v + e) : 0;\n  }\n\n  getCell(i, j) {\n    return this.cells[i][j];\n  }\n\n  getCellValue(i, j) {\n    let cell = new Cell(i, j);\n    return this.data.get(JSON.stringify(cell));\n  }\n\n  getValue(cell) {\n    return this.data.get(JSON.stringify(cell));\n  }\n\n  setValue(cell, value) {\n    this.data.set(JSON.stringify(cell), value);\n  }\n\n  get hasEmptyCells() {\n    return [...this.data.values].some((e) => e === 0);\n  }\n\n  getRow(i, direction) {\n    let row = [...this.cells[i]];\n\n    if (direction === Direction.RIGHT) {\n      return row.reverse();\n    }\n\n    return row;\n  }\n\n  getColumn(j, direction) {\n    var col = this.cells.map((e) => e[j]);\n\n    if (direction === Direction.DOWN) {\n      return col.reverse();\n    }\n\n    return col;\n  }\n\n  addNewValue() {\n    let allCells = [].concat(...this.cells);\n\n    if (allCells.every((cell) => this.data.get(JSON.stringify(cell)) > 0)) {\n      return;\n    }\n\n    shuffle(allCells);\n\n    var cell = allCells.find(\n      (cell) => this.data.get(JSON.stringify(cell)) === 0\n    );\n\n    if (cell) {\n      this.data.set(JSON.stringify(cell), getRandomInt(10) === 9 ? 4 : 2);\n    }\n  }\n\n  any(test) {\n    return test && [...this.data.values].some(test);\n  }\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n","import { SquareBoard } from \"./Board\";\nimport Direction from \"./Direction\";\n\nexport class Game2048 {\n  #board;\n  #colorMap;\n  constructor() {\n    this.#colorMap = new Map();\n    for (let i = 0; i < 11; i++) {\n      let key = Math.pow(2, i + 1);\n      this.#colorMap.set(key, Game2048.colors[i]);\n    }\n\n    this.startBoard();\n  }\n\n  static colors = [\n    0xeee4da,\n    0xede0c8,\n    0xf2b179,\n    0xf59563,\n    0xf67c5f,\n    0xf65e3b,\n    0xedcf72,\n    0xedcc61,\n    0xedc850,\n    0xedc53f,\n    0xedc223,\n  ];\n\n  get canMove() {\n    return this.#board.hasEmptyCells;\n  }\n\n  getBackgroundColor(value) {\n    let color = this.#colorMap.get(value);\n    let back = color ? color : 0xcdc1b4;\n    return colorToHex(back);\n  }\n\n  getForegroundColor(value) {\n    let fore = value < 16 ? 0x776e65 : 0xf9f6f2;\n    return colorToHex(fore);\n  }\n\n  getCellValue(i, j) {\n    return this.#board.getCellValue(i, j);\n  }\n\n  startBoard() {\n    this.#board = new SquareBoard(4);\n    this.#board.addNewValue();\n    this.#board.addNewValue();\n    this.score = 0;\n  }\n\n  processMove(direction) {\n    var moved = false;\n    for (let i = 0; i < 4; i++) {\n      switch (direction) {\n        case Direction.UP:\n        case Direction.DOWN:\n          let col = this.#board.getColumn(i, direction);\n          moved = this.moveValuesInRowOrColumn(col) || moved;\n          break;\n        case Direction.LEFT:\n        case Direction.RIGHT:\n          let row = this.#board.getRow(i, direction);\n          moved = this.moveValuesInRowOrColumn(row) || moved;\n          break;\n        default:\n          break;\n      }\n    }\n    if (moved) {\n      this.#board.addNewValue();\n    }\n  }\n\n  moveValuesInRowOrColumn(rowOrColumn) {\n    let list = rowOrColumn.map((e) => this.#board.getValue(e));\n    let movedList = mergeEqualOnArray(list, (e) => {\n      let total = e + e;\n      this.score += total;\n      return total;\n    });\n\n    let moved = movedList.length > 0 && movedList.length !== rowOrColumn.length;\n\n    let movedLen = movedList.length;\n    let len = rowOrColumn.length;\n    for (let i = 0; i < len; i++) {\n      this.#board.setValue(rowOrColumn[i], i < movedLen ? movedList[i] : 0);\n    }\n\n    return moved;\n  }\n}\n\nfunction mergeEqualOnArray(ary, add) {\n  var list = [];\n  var nonZeroList = ary.filter((e) => e > 0);\n\n  var i = 0;\n  var len = nonZeroList.length;\n  while (i < len) {\n    let current = nonZeroList[i];\n\n    if (i < len - 1 && current === nonZeroList[i + 1]) {\n      list.push(add(current));\n      i += 2;\n      continue;\n    }\n    list.push(nonZeroList[i]);\n    i++;\n  }\n\n  return list;\n}\n\nfunction colorToHex(i) {\n  var hexString = i.toString(16);\n  return \"#\" + hexString;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport Direction from \"./game/Direction\";\nimport { Game2048 } from \"./game/Game2048\";\n\nconst { default: GridCell } = require(\"./GridCell\");\n\nfunction App() {\n  const [game, setGame] = useState({\n    data: new Game2048(),\n  });\n\n  const handleArrowKey = useCallback((event) => {\n    switch (event.keyCode) {\n      case 38:\n        move(Direction.UP);\n        break;\n      case 40:\n        move(Direction.DOWN);\n        break;\n      case 37:\n        move(Direction.LEFT);\n        break;\n      case 39:\n        move(Direction.RIGHT);\n        break;\n      default:\n        return;\n    }\n    setGame({\n      data: game.data,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"keyup\", handleArrowKey);\n    return () => {\n      window.addEventListener(\"keyup\", handleArrowKey);\n    };\n  }, [handleArrowKey]);\n\n  const handlers = useSwipeable({\n    onSwipedUp: (_) => move(Direction.UP),\n    onSwipedDown: (_) => move(Direction.DOWN),\n    onSwipedLeft: (_) => move(Direction.LEFT),\n    onSwipedRight: (_) => move(Direction.RIGHT),\n    ...{\n      delta: 10,\n      preventDefaultTouchmoveEvent: true,\n      trackTouch: true,\n      trackMouse: false,\n      rotationAngle: 0,\n    },\n  });\n\n  function move(direction) {\n    game.data.processMove(direction);\n    setGame({\n      data: game.data,\n    });\n  }\n\n  function newGame() {\n    setGame({\n      data: new Game2048(),\n    });\n  }\n\n  var rows = [];\n\n  for (var i = 0; i < 4; i++) {\n    var cols = [];\n    for (var j = 0; j < 4; j++) {\n      let value = game.data.getCellValue(i, j);\n      let col = (\n        <GridCell\n          value={value > 0 ? value : \"\"}\n          background={game.data.getBackgroundColor(value)}\n          foreground={game.data.getForegroundColor(value)}\n        />\n      );\n      cols.push(<td key={j}>{col}</td>);\n    }\n    rows.push(<tr key={i}>{cols}</tr>);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3 mt-5\">\n          <div className=\"row justify-content-center\">\n            {/* <div className=\"col\">\n              <span className=\"display-4 font-weight-bold app-text-primary\">\n                2048\n              </span>\n            </div> */}\n            <div\n              style={{\n                width: \"280px\",\n              }}\n            >\n              <div className=\"row justify-content-between\">\n                <div className=\"col\">\n                  <h1 className=\"app-text-primary\">\n                    <strong>2048</strong>\n                  </h1>\n                </div>\n                <div className=\"col-auto\">\n                  <div\n                    className=\"rounded py-2 px-3\"\n                    style={{\n                      background: \"#bbada0\",\n                    }}\n                  >\n                    <div className=\"text-white-50\">SCORE</div>\n                    <div\n                      className=\"text-white font-weight-bold text-center\"\n                      style={{\n                        fontSize: \"1.4em\",\n                      }}\n                    >\n                      {game.data.score}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-center mt-4\">\n            <table className=\"board-table\" {...handlers}>\n              <tbody>{rows}</tbody>\n            </table>\n          </div>\n          <div className=\"row justify-content-center mt-4\">\n            <div\n              style={{\n                width: \"280px\",\n              }}\n            >\n              <div className=\"row justify-content-between\">\n                <div className=\"col\"></div>\n                <div className=\"col-auto\">\n                  <button className=\"app-btn\" onClick={() => newGame()}>\n                    Restart\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}